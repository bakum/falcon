package falcon.entity;

import java.math.BigDecimal;

import model.PlSqlEntity;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 27 12:13:26 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AccCostImpl extends PlSqlEntity {
    @Override
    protected void callInsertProcedure(TransactionEvent transactionEvent) {
    }

    @Override
    protected void callUpdateProcedure(TransactionEvent transactionEvent) {
        callStoredProcedure("ORDER_PKG.update_cost(?,?,?)",
                            new Object[] { getIdOrder(), getIdZatr(), getSumma()});
    }

    @Override
    protected void callDeleteProcedure(TransactionEvent transactionEvent) {
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(AccCostImpl obj) {
                return obj.getId();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setId((BigDecimal)value);
            }
        }
        ,
        IdOrder {
            public Object get(AccCostImpl obj) {
                return obj.getIdOrder();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setIdOrder((BigDecimal)value);
            }
        }
        ,
        IdKontrag {
            public Object get(AccCostImpl obj) {
                return obj.getIdKontrag();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setIdKontrag((BigDecimal)value);
            }
        }
        ,
        IdDiv {
            public Object get(AccCostImpl obj) {
                return obj.getIdDiv();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setIdDiv((BigDecimal)value);
            }
        }
        ,
        IdZatr {
            public Object get(AccCostImpl obj) {
                return obj.getIdZatr();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setIdZatr((BigDecimal)value);
            }
        }
        ,
        IdUser {
            public Object get(AccCostImpl obj) {
                return obj.getIdUser();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setIdUser((BigDecimal)value);
            }
        }
        ,
        Summa {
            public Object get(AccCostImpl obj) {
                return obj.getSumma();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setSumma((BigDecimal)value);
            }
        }
        ,
        Divisions {
            public Object get(AccCostImpl obj) {
                return obj.getDivisions();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setDivisions((EntityImpl)value);
            }
        }
        ,
        Kontragents {
            public Object get(AccCostImpl obj) {
                return obj.getKontragents();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setKontragents((EntityImpl)value);
            }
        }
        ,
        Orders {
            public Object get(AccCostImpl obj) {
                return obj.getOrders();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setOrders((EntityImpl)value);
            }
        }
        ,
        Users {
            public Object get(AccCostImpl obj) {
                return obj.getUsers();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setUsers((EntityImpl)value);
            }
        }
        ,
        Zatraty {
            public Object get(AccCostImpl obj) {
                return obj.getZatraty();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setZatraty((ZatratyImpl)value);
            }
        }
        ,
        VwOrder {
            public Object get(AccCostImpl obj) {
                return obj.getVwOrder();
            }

            public void put(AccCostImpl obj, Object value) {
                obj.setVwOrder((VwOrderImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AccCostImpl object);

        public abstract void put(AccCostImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int IDORDER = AttributesEnum.IdOrder.index();
    public static final int IDKONTRAG = AttributesEnum.IdKontrag.index();
    public static final int IDDIV = AttributesEnum.IdDiv.index();
    public static final int IDZATR = AttributesEnum.IdZatr.index();
    public static final int IDUSER = AttributesEnum.IdUser.index();
    public static final int SUMMA = AttributesEnum.Summa.index();
    public static final int DIVISIONS = AttributesEnum.Divisions.index();
    public static final int KONTRAGENTS = AttributesEnum.Kontragents.index();
    public static final int ORDERS = AttributesEnum.Orders.index();
    public static final int USERS = AttributesEnum.Users.index();
    public static final int ZATRATY = AttributesEnum.Zatraty.index();
    public static final int VWORDER = AttributesEnum.VwOrder.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AccCostImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for IdOrder, using the alias name IdOrder.
     * @return the value of IdOrder
     */
    public BigDecimal getIdOrder() {
        return (BigDecimal)getAttributeInternal(IDORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdOrder.
     * @param value value to set the IdOrder
     */
    public void setIdOrder(BigDecimal value) {
        setAttributeInternal(IDORDER, value);
    }

    /**
     * Gets the attribute value for IdKontrag, using the alias name IdKontrag.
     * @return the value of IdKontrag
     */
    public BigDecimal getIdKontrag() {
        return (BigDecimal)getAttributeInternal(IDKONTRAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdKontrag.
     * @param value value to set the IdKontrag
     */
    public void setIdKontrag(BigDecimal value) {
        setAttributeInternal(IDKONTRAG, value);
    }

    /**
     * Gets the attribute value for IdDiv, using the alias name IdDiv.
     * @return the value of IdDiv
     */
    public BigDecimal getIdDiv() {
        return (BigDecimal)getAttributeInternal(IDDIV);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdDiv.
     * @param value value to set the IdDiv
     */
    public void setIdDiv(BigDecimal value) {
        setAttributeInternal(IDDIV, value);
    }

    /**
     * Gets the attribute value for IdZatr, using the alias name IdZatr.
     * @return the value of IdZatr
     */
    public BigDecimal getIdZatr() {
        return (BigDecimal)getAttributeInternal(IDZATR);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdZatr.
     * @param value value to set the IdZatr
     */
    public void setIdZatr(BigDecimal value) {
        setAttributeInternal(IDZATR, value);
    }

    /**
     * Gets the attribute value for IdUser, using the alias name IdUser.
     * @return the value of IdUser
     */
    public BigDecimal getIdUser() {
        return (BigDecimal)getAttributeInternal(IDUSER);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdUser.
     * @param value value to set the IdUser
     */
    public void setIdUser(BigDecimal value) {
        setAttributeInternal(IDUSER, value);
    }

    /**
     * Gets the attribute value for Summa, using the alias name Summa.
     * @return the value of Summa
     */
    public BigDecimal getSumma() {
        return (BigDecimal)getAttributeInternal(SUMMA);
    }

    /**
     * Sets <code>value</code> as the attribute value for Summa.
     * @param value value to set the Summa
     */
    public void setSumma(BigDecimal value) {
        setAttributeInternal(SUMMA, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDivisions() {
        return (EntityImpl)getAttributeInternal(DIVISIONS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDivisions(EntityImpl value) {
        setAttributeInternal(DIVISIONS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getKontragents() {
        return (EntityImpl)getAttributeInternal(KONTRAGENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setKontragents(EntityImpl value) {
        setAttributeInternal(KONTRAGENTS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getOrders() {
        return (EntityImpl)getAttributeInternal(ORDERS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setOrders(EntityImpl value) {
        setAttributeInternal(ORDERS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getUsers() {
        return (EntityImpl)getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setUsers(EntityImpl value) {
        setAttributeInternal(USERS, value);
    }

    /**
     * @return the associated entity ZatratyImpl.
     */
    public ZatratyImpl getZatraty() {
        return (ZatratyImpl)getAttributeInternal(ZATRATY);
    }

    /**
     * Sets <code>value</code> as the associated entity ZatratyImpl.
     */
    public void setZatraty(ZatratyImpl value) {
        setAttributeInternal(ZATRATY, value);
    }

    /**
     * @return the associated entity VwOrderImpl.
     */
    public VwOrderImpl getVwOrder() {
        return (VwOrderImpl)getAttributeInternal(VWORDER);
    }

    /**
     * Sets <code>value</code> as the associated entity VwOrderImpl.
     */
    public void setVwOrder(VwOrderImpl value) {
        setAttributeInternal(VWORDER, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[]{id});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("falcon.entity.AccCost");
    }
}
