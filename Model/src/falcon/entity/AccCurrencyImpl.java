package falcon.entity;

import java.math.BigDecimal;

import model.PlSqlEntity;

import model.UserNotDefined;

import oracle.jbo.Key;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 28 18:41:25 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AccCurrencyImpl extends PlSqlEntity {
    
    protected boolean isNegative(BigDecimal b)
        {
            if (b==null) return false;
            return b.signum() == -1;
        }
    @Override
    protected void callInsertProcedure(TransactionEvent transactionEvent) {
        BigDecimal id = getSessionUserId();
        //BigDecimal id = new BigDecimal(1);// for tests
        try {
            if (id.intValue() == 0)

                throw new UserNotDefined(id);

            else
                callStoredProcedure("KASSA_PKG.INSERT_ORDER(?,?,?,?,?)",
                                    new Object[] { getDat(),getIdMove(),id, getSumma(), getComments()});
        } catch (UserNotDefined e) {
            System.out.println(e.toString());
        }
    }

    @Override
    protected void callUpdateProcedure(TransactionEvent transactionEvent) {
        BigDecimal summ = getSumma();
        if (isNegative(summ)) summ = summ.multiply(new BigDecimal(-1));
        callStoredProcedure("KASSA_PKG.UPDATE_ORDER(?,?,?,?,?)",
                            new Object[] { getId(),getDat(),getIdMove(),summ, getComments()});
    }

    @Override
    protected void callDeleteProcedure(TransactionEvent transactionEvent) {
        callStoredProcedure("KASSA_PKG.DELETE_ORDER(?)", new Object[] { getId() });
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(AccCurrencyImpl obj) {
                return obj.getId();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setId((BigDecimal)value);
            }
        }
        ,
        Dat {
            public Object get(AccCurrencyImpl obj) {
                return obj.getDat();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setDat((Timestamp)value);
            }
        }
        ,
        IdMove {
            public Object get(AccCurrencyImpl obj) {
                return obj.getIdMove();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setIdMove((BigDecimal)value);
            }
        }
        ,
        IdRegistrator {
            public Object get(AccCurrencyImpl obj) {
                return obj.getIdRegistrator();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setIdRegistrator((String)value);
            }
        }
        ,
        IdKassa {
            public Object get(AccCurrencyImpl obj) {
                return obj.getIdKassa();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setIdKassa((BigDecimal)value);
            }
        }
        ,
        IdCurr {
            public Object get(AccCurrencyImpl obj) {
                return obj.getIdCurr();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setIdCurr((BigDecimal)value);
            }
        }
        ,
        Summa {
            public Object get(AccCurrencyImpl obj) {
                return obj.getSumma();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setSumma((BigDecimal)value);
            }
        }
        ,
        Comments {
            public Object get(AccCurrencyImpl obj) {
                return obj.getComments();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setComments((String)value);
            }
        }
        ,
        Kassa {
            public Object get(AccCurrencyImpl obj) {
                return obj.getKassa();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setKassa((EntityImpl)value);
            }
        }
        ,
        Currency {
            public Object get(AccCurrencyImpl obj) {
                return obj.getCurrency();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setCurrency((EntityImpl)value);
            }
        }
        ,
        MoveStat {
            public Object get(AccCurrencyImpl obj) {
                return obj.getMoveStat();
            }

            public void put(AccCurrencyImpl obj, Object value) {
                obj.setMoveStat((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AccCurrencyImpl object);

        public abstract void put(AccCurrencyImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int DAT = AttributesEnum.Dat.index();
    public static final int IDMOVE = AttributesEnum.IdMove.index();
    public static final int IDREGISTRATOR = AttributesEnum.IdRegistrator.index();
    public static final int IDKASSA = AttributesEnum.IdKassa.index();
    public static final int IDCURR = AttributesEnum.IdCurr.index();
    public static final int SUMMA = AttributesEnum.Summa.index();
    public static final int COMMENTS = AttributesEnum.Comments.index();
    public static final int KASSA = AttributesEnum.Kassa.index();
    public static final int CURRENCY = AttributesEnum.Currency.index();
    public static final int MOVESTAT = AttributesEnum.MoveStat.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AccCurrencyImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Dat, using the alias name Dat.
     * @return the value of Dat
     */
    public Timestamp getDat() {
        return (Timestamp)getAttributeInternal(DAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dat.
     * @param value value to set the Dat
     */
    public void setDat(Timestamp value) {
        setAttributeInternal(DAT, value);
    }

    /**
     * Gets the attribute value for IdMove, using the alias name IdMove.
     * @return the value of IdMove
     */
    public BigDecimal getIdMove() {
        return (BigDecimal)getAttributeInternal(IDMOVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdMove.
     * @param value value to set the IdMove
     */
    public void setIdMove(BigDecimal value) {
        setAttributeInternal(IDMOVE, value);
    }

    /**
     * Gets the attribute value for IdRegistrator, using the alias name IdRegistrator.
     * @return the value of IdRegistrator
     */
    public String getIdRegistrator() {
        return (String)getAttributeInternal(IDREGISTRATOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdRegistrator.
     * @param value value to set the IdRegistrator
     */
    public void setIdRegistrator(String value) {
        setAttributeInternal(IDREGISTRATOR, value);
    }

    /**
     * Gets the attribute value for IdKassa, using the alias name IdKassa.
     * @return the value of IdKassa
     */
    public BigDecimal getIdKassa() {
        return (BigDecimal)getAttributeInternal(IDKASSA);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdKassa.
     * @param value value to set the IdKassa
     */
    public void setIdKassa(BigDecimal value) {
        setAttributeInternal(IDKASSA, value);
    }

    /**
     * Gets the attribute value for IdCurr, using the alias name IdCurr.
     * @return the value of IdCurr
     */
    public BigDecimal getIdCurr() {
        return (BigDecimal)getAttributeInternal(IDCURR);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdCurr.
     * @param value value to set the IdCurr
     */
    public void setIdCurr(BigDecimal value) {
        setAttributeInternal(IDCURR, value);
    }

    /**
     * Gets the attribute value for Summa, using the alias name Summa.
     * @return the value of Summa
     */
    public BigDecimal getSumma() {
        return (BigDecimal)getAttributeInternal(SUMMA);
    }

    /**
     * Sets <code>value</code> as the attribute value for Summa.
     * @param value value to set the Summa
     */
    public void setSumma(BigDecimal value) {
        setAttributeInternal(SUMMA, value);
    }

    /**
     * Gets the attribute value for Comments, using the alias name Comments.
     * @return the value of Comments
     */
    public String getComments() {
        return (String)getAttributeInternal(COMMENTS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Comments.
     * @param value value to set the Comments
     */
    public void setComments(String value) {
        setAttributeInternal(COMMENTS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getKassa() {
        return (EntityImpl)getAttributeInternal(KASSA);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setKassa(EntityImpl value) {
        setAttributeInternal(KASSA, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCurrency() {
        return (EntityImpl)getAttributeInternal(CURRENCY);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCurrency(EntityImpl value) {
        setAttributeInternal(CURRENCY, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getMoveStat() {
        return (EntityImpl)getAttributeInternal(MOVESTAT);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMoveStat(EntityImpl value) {
        setAttributeInternal(MOVESTAT, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[]{id});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("falcon.entity.AccCurrency");
    }
}
