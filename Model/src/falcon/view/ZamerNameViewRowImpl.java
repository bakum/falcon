package falcon.view;

import java.math.BigDecimal;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 30 19:53:29 EEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ZamerNameViewRowImpl extends ViewRowImpl {
    public static final int ENTITY_ZAMERNAME = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getId();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setId((BigDecimal)value);
            }
        }
        ,
        Name {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getName();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        DivisionsId {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getDivisionsId();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setDivisionsId((BigDecimal)value);
            }
        }
        ,
        IsActive {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getIsActive();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setIsActive((Integer)value);
            }
        }
        ,
        IsActiveBoolean {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getIsActiveBoolean();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setIsActiveBoolean((Boolean)value);
            }
        }
        ,
        DivisionsView1 {
            public Object get(ZamerNameViewRowImpl obj) {
                return obj.getDivisionsView1();
            }

            public void put(ZamerNameViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ZamerNameViewRowImpl object);

        public abstract void put(ZamerNameViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int DIVISIONSID = AttributesEnum.DivisionsId.index();
    public static final int ISACTIVE = AttributesEnum.IsActive.index();
    public static final int ISACTIVEBOOLEAN = AttributesEnum.IsActiveBoolean.index();
    public static final int DIVISIONSVIEW1 = AttributesEnum.DivisionsView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ZamerNameViewRowImpl() {
    }

    /**
     * Gets ZamerName entity object.
     * @return the ZamerName
     */
    public EntityImpl getZamerName() {
        return (EntityImpl)getEntity(ENTITY_ZAMERNAME);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for DIVISIONS_ID using the alias name DivisionsId.
     * @return the DIVISIONS_ID
     */
    public BigDecimal getDivisionsId() {
        return (BigDecimal) getAttributeInternal(DIVISIONSID);
    }

    /**
     * Sets <code>value</code> as attribute value for DIVISIONS_ID using the alias name DivisionsId.
     * @param value value to set the DIVISIONS_ID
     */
    public void setDivisionsId(BigDecimal value) {
        setAttributeInternal(DIVISIONSID, value);
    }

    /**
     * Gets the attribute value for IS_ACTIVE using the alias name IsActive.
     * @return the IS_ACTIVE
     */
    public Integer getIsActive() {
        return (Integer) getAttributeInternal(ISACTIVE);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_ACTIVE using the alias name IsActive.
     * @param value value to set the IS_ACTIVE
     */
    public void setIsActive(Integer value) {
        setAttributeInternal(ISACTIVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IsActiveBoolean.
     * @return the IsActiveBoolean
     */
    public Boolean getIsActiveBoolean() {
        //return (Boolean) getAttributeInternal(ISACTIVEBOOLEAN);
        if (this.getIsActive()==1)
            return true;
        else
            return false;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IsActiveBoolean.
     * @param value value to set the  IsActiveBoolean
     */
    public void setIsActiveBoolean(Boolean value) {
        //setAttributeInternal(ISACTIVEBOOLEAN, value);
        if (value)
            setIsActive(1);
        else
            setIsActive(0);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DivisionsView1.
     */
    public RowSet getDivisionsView1() {
        return (RowSet)getAttributeInternal(DIVISIONSVIEW1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
