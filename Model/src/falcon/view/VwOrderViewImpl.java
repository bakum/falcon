package falcon.view;

import falcon.view.common.VwOrderView;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.util.Calendar;
import java.util.HashMap;

import java.util.Map;

import model.FalconFiltersViewObjectImpl;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.Entity;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.DATE;

import org.codehaus.groovy.runtime.InvokerHelper;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 19 12:44:14 EET 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VwOrderViewImpl extends FalconFiltersViewObjectImpl implements VwOrderView {
    /**
     * This is the default constructor (do not remove).
     */
    public VwOrderViewImpl() {
    }
    
    public Date getDateFirst() throws SQLException {
        /* Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH)); // это будет начало месяца
        //calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH)); // это будет конец месяца
        java.util.Date pDate = calendar.getTime();
        oracle.jbo.domain.Date dbDate= new oracle.jbo.domain.Date(new java.sql.Date(pDate.getTime()));
        //oracle.jbo.domain.Date time = new oracle.jbo.domain.Date(pDate); */
        return new oracle.jbo.domain.Date();
    }
    
    public Date getDateLast() throws SQLException {
        Calendar calendar = Calendar.getInstance();
        //calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH)); // это будет начало месяца
        //calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH)); // это будет конец месяца
        calendar.set(Calendar.DAY_OF_YEAR, calendar.getActualMaximum(Calendar.DAY_OF_YEAR)); // это будет конец года
        java.util.Date pDate = calendar.getTime();
        oracle.jbo.domain.Date dbDate= new oracle.jbo.domain.Date(new java.sql.Date(pDate.getTime()));
        //oracle.jbo.domain.Date time = new oracle.jbo.domain.Date(pDate);
        return dbDate;
    }

    /**
     * Returns the bind variable value for u_name.
     * @return bind variable value for u_name
     */
    public String getu_name() {
        //return (String)getNamedWhereClauseParam("u_name");
        return  getSessionUserName();
    }

    /**
     * Sets <code>value</code> for bind variable u_name.
     * @param value value to bind as u_name
     */
    public void setu_name(String value) {
        setNamedWhereClauseParam("u_name", value);
    }

    /**
     * Returns the variable value for f_dat.
     * @return variable value for f_dat
     */
    public Date getf_dat() {
        return (Date)ensureVariableManager().getVariableValue("f_dat");
    }

    /**
     * Sets <code>value</code> for variable f_dat.
     * @param value value to bind as f_dat
     */
    public void setf_dat(Date value) {
        ensureVariableManager().setVariableValue("f_dat", value);
    }

    /**
     * Returns the variable value for l_dat.
     * @return variable value for l_dat
     */
    public Date getl_dat() {
        return (Date)ensureVariableManager().getVariableValue("l_dat");
    }

    /**
     * Sets <code>value</code> for variable l_dat.
     * @param value value to bind as l_dat
     */
    public void setl_dat(Date value) {
        ensureVariableManager().setVariableValue("l_dat", value);
    }

    private class AgrFuncHelper extends HashMap {
        @SuppressWarnings("compatibility:-9173621185008272882")
        private static final long serialVersionUID = 1L;
        private String funcName;

        public AgrFuncHelper(String funcName) {
            super();
            this.funcName = funcName;
        }


        public Object get(Object key) {
            //Invoke private method
            //of our DefaultRowSet (sum,count,avg,min,max)
            //key is argument expression for the aggr funcion being called
            //sum("Salary")

            return InvokerHelper.invokeMethod(getDefaultRowSet(), funcName, key);
        }


    }

    public Map getSum() {
        return new AgrFuncHelper("sum");
    }

    public Map getCount() {
        return new AgrFuncHelper("count");
    }

    @Override
    public void insertRow(Row row) {
        super.insertRow(row);
        row.removeAndRetain();
        first();
        previous();
        getDefaultRowSet().insertRow(row);
    }

    public String getRowStatus(Row row) {
        VwOrderViewRowImpl rwImpl = (VwOrderViewRowImpl)row;
        String rwStatus = translateStatusToString(rwImpl.getEntity(0).getEntityState());
        return rwStatus;
    }
    

    private String translateStatusToString(byte b) {
        String ret = null;
        switch (b) {
        case Entity.STATUS_INITIALIZED:
            {
                ret = "Initialized";
                break;
            }
        case Entity.STATUS_MODIFIED:
            {
                ret = "Modified";
                break;
            }
        case Entity.STATUS_UNMODIFIED:
            {
                ret = "Unmodified";
                break;
            }
        case Entity.STATUS_NEW:
            {
                ret = "New";
                break;
            }
        }
        return ret;
    }


}
